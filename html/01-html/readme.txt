vscode插件：
  1、code runner 运行JS文件
  2、live server 运行HTML文件
        装完live server 后，它会自动启动一台服务

HTML叫超文本标签语言
    后缀：.html 

网络的基本知识：
    url:
         http://127.0.0.1:5500/01-html/01-初始html.html      （live server 打开）
         file:///D:/practice/01-html/01-%E5%88%9D%E5%A7%8Bhtml.html（文件夹打开）

    http:协议     计算机与计算机之间通信的一套规则
    127.0.0.1：本机服务的IP地址
    5500：端口   live server 默认开启服务的端口

    file ：协议

从输入一个网址到浏览器显示页面经历的过程：（上网的本质就是访问一台服务器，服务器给你返回数据）
    1、DNS解析
       http://www.baidu.com   域名  就是一台服务器的别名    你要访问一台服务器必须通过一个IP地址。
       DNS  域名解析系统  本质就是一个数据服务器  里面就存储了域名和IP的对应关系。
       最后会得到一个IP地址，通过这个IP地址，才能访问一台服务器。
       得到一个地址后，就知道我们要访问哪一台服务器了。
    2、发起TCP连接
       类似于先拨通电话，只有先拨通电话后，才能通信交流。
       在数据真正流通起来前还有一步，就是要先建立连接，这个连接是TCP连接。
       通道就打通了，然后就可以进行数据通信了。
       三次握手。
    3、发送HTTP请求
        请求需要规则，必须要满足一个规则，这个规则就是HTTP规则。
        当点击会车时，请求就发出来。
    4、服务器处理请求并返回HTTP报文
        服务器就得到这个请求了，然后服务器进行处理，整合你需要的资源。
        服务器把资源发给浏览器。
    5、浏览器解析渲染页面
        浏览器进行资源解析，解析完后，进行渲染，显示。
    6、连接结束
        四次挥手。
    整个过程也叫一个事务。

浏览器得到资源后，怎么渲染出来的：
    用户界面（即用户能看到的浏览器界面）
    浏览器引擎（查询和操作渲染引擎）
    渲染引擎（负责解析、渲染请求的内容）：
    网络（负责网络）、js解释器(解释执行JS）、ui后端（负责绘制）

    浏览器是一个多进程软件，当打开一个选项卡后，就相当于开启了一个进程。一个软件（项目）跑起来后就会产生一个或多个进程。
    进程是操作系统分配和调度资源（CPU和内存）的基本单位。

    打开一个选项卡后，就产生了一个进程，进程是不干活的，相当于一个工厂。干活的是线程，线程相当于工厂的工人。
    现在有两个工人：JS线程，UI线程。   JS 线程和UI线程互斥。

    想要让页面显示出来，必须要有一个树，浏览器会根据这个树进行渲染。

    先研究UI线程如何干活：
    同时解析HTML和CSS，解析HTML生成一个DOM树。解释CSS生成CSS规则树。两个树合成渲染树，最后把页面渲染显示出来。

标签：
    分单标签（只有开始标签，没有结束标签）和双标签（有开始标签和结束标签）
    <h1></h1>    开始标签<h1>   结束标签</h1>

    1、标题标签
    <h1></h1>
    h标签的作用：新闻/文章，logo会使用h1。
    2、段落标签
    <p></p>
    3、超链接标签
    <a href="http://www.baidu.com">百度</a>
    快捷键：shift+alt+向下的箭头    复制上一行代码
           ctrl+/    注释
    href属性：当你点击了百度，跳转到什么地方。

     <a target=“-blank” href="http://www.baidu.com">百度</a>
     target=“-blank”  重新打开一个网页。不加就在当前页面中打开。

     站外链接：<a href="http://www.baidu.com">百度</a>
     站内链接：<a href="./01-骨架.html">骨架</a>  当前文件夹
              <a href="../01-骨架.html">骨架</a>  上一文件夹
     锚点链接：在一个网页进行跳转  例：目录  
     打锚点，连接到锚点 
     <a name="abc"></a>   打锚点
     <a href="#abc"></a>  连接到锚点

     在HTML文档上有一个默认锚点，叫top，链接的话写#top,并且top可以不写。
     <a href="#">返回顶部</a> 
     4、图片标签
     <img src="" alt="">
     可直接复制图片地址，也可用./或../
     <img src="./imgs/01.gif" alt="" title=“”>
     img 中的属性：
         src：图片的地址。
         alt：1、当图片出错时，显示alt对应的内容。
              2、seo
         title：当鼠标放上去时，显示title的内容。
    5、div和span
    在HTML标签中，分男标签和女标签：
    男标签要独占一行，女标签会并排显示。
    div，h1男标签 ， a,img,span女标签
    div没有任何意思，为了配合css完成页面布局和美化的。
    span也没有任何意思，为了配合css完成页面布局和美化的。
    6、列表：无序列表、有序列表、自定义列表
         无序：ul
         有序：ol
         自定义：dl
    在列表中是需要有列表项的：li
    7、表单   form
    目的：用于收集用户信息的   例如：登录、注册、朋友圈、博客
    <from action="" method=“post”></from>
    action表示把数据提交到服务器的什么地方
    method表示提交的方式：get、post
    一般get表示从服务器获取数据
    post是用于把客户端的数据扔到服务器上
    表单中放表单项
    <input type="text">
    input 各种框   type表示什么类型的框
    text 文本框   password  密码    file  上传文件   button  按钮   radio  单选   submit  提交   checkbox  复选框
    <textarea cols="30" rows="10"></textarea>    大的文本框
    <select><option value=""></option></select>   下拉列表


属性：
     在开始标签中，可以写xxx="xxx”   例如：id=“box"  xxx="xxx"叫属性,xxx叫属性名，“xxx"叫属性值。

元素：
    开始标签+结束标签+属性+标签中的内容 = 元素 =DOM元素
    例如：<h1 id="box" class="item">hello</h1>



客户端与服务器
 客户端：浏览器，APP，PC
 服务器：一台装有特殊软件的电脑，装不同的软件对外提供不同的服务。
由于我们现在没有服务器，我们可以在自己电脑上装一个软件，来提供类似的服务器提供的服务。

HTTP协议：客户端与服务器通信的一套规则（协议）。

网络模型：应用层、表示层、会话层、传 输层、物理层、数据链路层、网络层
HTTP协议是位于应用层的一种协议。HTTP协议仅仅是应用层协议之一。 
HTTP协议是基于TCP协议的。

TCP和UDP协议：位于传输层。
TCP特点：安全、可靠、耗时
UDP：不安全、不可靠、速度快

HTTP协议是基于TCP的，那么在数据流通之前，有一个建立连接的过程：

三次握手：客户端向服务器发起连接请求。
服务器确认收到连接请求，并且向客户端发送连接请求。
客户端确认收到服务器发送的连接请求。客户端与服务器就可以通信了。

四次挥手：甲方发出断开连接的请求
乙方确认请求
乙方发出断开连接的请求
甲方确认收到

当甲方发出断开连接请求后，乙方确认收到后，可能乙方还有数据没有给甲方，所以乙方不能立即断开连接，只有等到乙方把所有的事处理完后，才能给甲方发一个可以断开连接的请求。




 








